'''
Ваш коллега придумал свой способ «генерации» данных. Для этого он предложил брать набор чисел, возводить их в куб, потом брать остаток от деления на 7, прибавлять к этому изначальный массив — и выдавать результат как «сгенерированные» данные.
Коллега был очень увлечен этой идеей и написал алгоритм, но он работает неправильно — коллега подсчитал на бумаге ожидаемый результат, и он не совпал с выводом программы.

Коллега предлагает распечатать массив на каждом этапе, чтобы понять, где же ошибка. Увы, на сервере, где вы выполняете код, очень много чего печатается. Чтобы выделить именно ваш вывод и не запутаться, коллега предлагает печатать решетки вокруг. У коллеги уже есть код для печати массива:
print("###")
print(array)
print("###")

Он просит вас встроить этот код везде, где изменяется переменная answer, и печатать answer таким образом.
Код коллеги дан ниже. Распечатайте answer после каждого цикла и попробуйте найти ошибки в коде. Отправьте в LMS исправленную версию функции math_task  и её вызов с данными test_data.  В вашей функции должна происходить печать answer после каждого цикла.
NB! Не забудьте вызвать функцию math_task в конце. Обратите внимание, что данные test_data уже зашиты в чекер, не нужно определять их самостоятельно.
'''

def math_task(data):
    answer = []
    for elem in data:
        answer += [elem ** 3]
    print("###")
    print(answer)
    print("###")
    for i in range(len(answer)):
        answer[i] = answer[i] % 7
    print("###")
    print(answer)
    print("###")
    for i in range(len(answer)):
        answer[i] = answer[i] + data[i]
    print("###")
    print(answer)
    print("###")
    return answer

math_task(test_data)
